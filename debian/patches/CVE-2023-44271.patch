Backport of:

From 1fe1bb49c452b0318cad12ea9d97c3bef188e9a7 Mon Sep 17 00:00:00 2001
From: Andrew Murray <radarhere@users.noreply.github.com>
Date: Fri, 30 Jun 2023 23:32:26 +1000
Subject: [PATCH] Added ImageFont.MAX_STRING_LENGTH

---
 Tests/test_imagefont.py      | 19 +++++++++++++++++++
 docs/reference/ImageFont.rst | 18 ++++++++++++++++++
 docs/releasenotes/10.0.0.rst | 12 ++++++++++++
 src/PIL/ImageFont.py         | 15 +++++++++++++++
 4 files changed, 64 insertions(+)

#diff --git a/docs/releasenotes/10.0.0.rst b/docs/releasenotes/10.0.0.rst
#index 94ff04d46a2..4cd6293229a 100644
#--- a/docs/releasenotes/10.0.0.rst
#+++ b/docs/releasenotes/10.0.0.rst
#@@ -170,6 +170,18 @@ now been fixed.
# This effectively dates to the PIL fork, since problem images would still have
# been processed before Pillow started checking for decompression bombs.
# 
#+Added ImageFont.MAX_STRING_LENGTH
#+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
#+
#+To protect against potential DOS attacks when using arbitrary strings as text
#+input, Pillow will now raise a ``ValueError`` if the number of characters
#+passed into ImageFont methods is over a certain limit,
#+:py:data:`PIL.ImageFont.MAX_STRING_LENGTH`.
#+
#+This threshold can be changed by setting
#+:py:data:`PIL.ImageFont.MAX_STRING_LENGTH`. It can be disabled by setting
#+``ImageFont.MAX_STRING_LENGTH = None``.
#+
# Other Changes
# =============
# 
--- a/Tests/test_imagefont.py
+++ b/Tests/test_imagefont.py
@@ -990,6 +990,30 @@ class TestImageFont:
 
         assert_image_similar_tofile(im, "Tests/images/colr_bungee_mask.png", 22)
 
+    def test_too_many_characters(self):
+        font = self.get_font()
+
+        with pytest.raises(ValueError):
+            font.getsize("A" * 1000001)
+        with pytest.raises(ValueError):
+            font.getlength("A" * 1000001)
+        with pytest.raises(ValueError):
+            font.getbbox("A" * 1000001)
+        with pytest.raises(ValueError):
+            font.getsize_multiline("A" * 1000001)
+        with pytest.raises(ValueError):
+            font.getoffset("A" * 1000001)
+        with pytest.raises(ValueError):
+            font.getmask2("A" * 1000001)
+
+        transposed_font = ImageFont.TransposedFont(font)
+        with pytest.raises(ValueError):
+            transposed_font.getsize("A" * 1000001)
+
+        default_font = ImageFont.load_default()
+        with pytest.raises(ValueError):
+            default_font.getsize("A" * 1000001)
+
 
 @skip_unless_feature("raqm")
 class TestImageFont_RaqmLayout(TestImageFont):
--- a/docs/reference/ImageFont.rst
+++ b/docs/reference/ImageFont.rst
@@ -18,6 +18,15 @@ OpenType fonts (as well as other font fo
 library). For earlier versions, TrueType support is only available as part of
 the imToolkit package.
 
+.. warning::
+    To protect against potential DOS attacks when using arbitrary strings as
+    text input, Pillow will raise a ``ValueError`` if the number of characters
+    is over a certain limit, :py:data:`MAX_STRING_LENGTH`.
+
+    This threshold can be changed by setting
+    :py:data:`MAX_STRING_LENGTH`. It can be disabled by setting
+    ``ImageFont.MAX_STRING_LENGTH = None``.
+
 Example
 -------
 
@@ -72,3 +81,12 @@ Constants
 
     Requires Raqm, you can check support using
     :py:func:`PIL.features.check_feature` with ``feature="raqm"``.
+
+Constants
+---------
+
+.. data:: MAX_STRING_LENGTH
+
+    Set to 1,000,000, to protect against potential DOS attacks. Pillow will
+    raise a ``ValueError`` if the number of characters is over this limit. The
+    check can be disabled by setting ``ImageFont.MAX_STRING_LENGTH = None``.
--- a/src/PIL/ImageFont.py
+++ b/src/PIL/ImageFont.py
@@ -43,12 +43,21 @@ class _imagingft_not_installed:
         raise ImportError("The _imagingft C module is not installed")
 
 
+MAX_STRING_LENGTH = 1000000
+
+
 try:
     from . import _imagingft as core
 except ImportError:
     core = _imagingft_not_installed()
 
 
+def _string_length_check(text):
+    if MAX_STRING_LENGTH is not None and len(text) > MAX_STRING_LENGTH:
+        msg = "too many characters in string"
+        raise ValueError(msg)
+
+
 # FIXME: add support for pilfont2 format (see FontFile.py)
 
 # --------------------------------------------------------------------
@@ -125,6 +134,7 @@ class ImageFont:
 
         :return: (width, height)
         """
+        _string_length_check(text)
         return self.font.getsize(text)
 
     def getmask(self, text, mode="", *args, **kwargs):
@@ -297,6 +307,7 @@ class FreeTypeFont:
 
         :return: Width for horizontal, height for vertical text.
         """
+        _string_length_check(text)
         return self.font.getlength(text, mode, direction, features, language) / 64
 
     def getbbox(
@@ -356,6 +367,7 @@ class FreeTypeFont:
 
         :return: ``(left, top, right, bottom)`` bounding box
         """
+        _string_length_check(text)
         size, offset = self.font.getsize(
             text, mode, direction, features, language, anchor
         )
@@ -416,6 +428,7 @@ class FreeTypeFont:
 
         :return: (width, height)
         """
+        _string_length_check(text)
         # vertical offset is added for historical reasons
         # see https://github.com/python-pillow/Pillow/pull/4910#discussion_r486682929
         size, offset = self.font.getsize(text, "L", direction, features, language)
@@ -473,6 +486,7 @@ class FreeTypeFont:
 
         :return: (width, height)
         """
+        _string_length_check(text)
         max_width = 0
         lines = self._multiline_split(text)
         line_spacing = self.getsize("A", stroke_width=stroke_width)[1] + spacing
@@ -494,6 +508,7 @@ class FreeTypeFont:
 
         :return: A tuple of the x and y offset
         """
+        _string_length_check(text)
         return self.font.getsize(text)[1]
 
     def getmask(
@@ -655,6 +670,7 @@ class FreeTypeFont:
                  :py:mod:`PIL.Image.core` interface module, and the text offset, the
                  gap between the starting coordinate and the first marking
         """
+        _string_length_check(text)
         size, offset = self.font.getsize(
             text, mode, direction, features, language, anchor
         )
@@ -758,6 +774,7 @@ class TransposedFont:
         self.orientation = orientation  # any 'transpose' argument, or None
 
     def getsize(self, text, *args, **kwargs):
+        _string_length_check(text)
         w, h = self.font.getsize(text)
         if self.orientation in (Image.ROTATE_90, Image.ROTATE_270):
             return h, w
