From c9f1b35e981075110a23487a8d4a6cbb59a588ea Mon Sep 17 00:00:00 2001
From: Andrew Murray <radarhere@users.noreply.github.com>
Date: Thu, 30 Jun 2022 12:47:35 +1000
Subject: [PATCH] Added GIF decompression bomb check

---
 Tests/images/decompression_bomb_extents.gif | Bin 0 -> 368 bytes
 Tests/test_decompression_bomb.py            |   5 +++++
 src/PIL/GifImagePlugin.py                   |   1 +
 3 files changed, 6 insertions(+)
 create mode 100644 Tests/images/decompression_bomb_extents.gif

--- pillow-9.0.1.orig/Tests/test_decompression_bomb.py
+++ pillow-9.0.1/Tests/test_decompression_bomb.py
@@ -62,6 +62,11 @@ class TestDecompressionBomb:
             with Image.open("Tests/images/decompression_bomb.gif"):
                 pass
 
+    def test_exception_gif_extents(self):
+        with Image.open("Tests/images/decompression_bomb_extents.gif") as im:
+            with pytest.raises(Image.DecompressionBombError):
+                im.seek(1)
+
     def test_exception_bmp(self):
         with pytest.raises(Image.DecompressionBombError):
             with Image.open("Tests/images/bmp/b/reallybig.bmp"):
--- pillow-9.0.1.orig/src/PIL/GifImagePlugin.py
+++ pillow-9.0.1/src/PIL/GifImagePlugin.py
@@ -152,7 +152,6 @@ class GifImageFile(ImageFile.ImageFile):
 
         if frame != self.__frame + 1:
             raise ValueError(f"cannot seek to frame {frame}")
-        self.__frame = frame
 
         self.tile = []
 
@@ -164,25 +163,12 @@ class GifImageFile(ImageFile.ImageFile):
                 pass
             self.__offset = 0
 
-        if self.__frame == 1:
-            self.pyaccess = None
-            if "transparency" in self.info:
-                self.mode = "RGBA"
-                self.im.putpalettealpha(self.info["transparency"], 0)
-                self.im = self.im.convert("RGBA", Image.FLOYDSTEINBERG)
-
-                del self.info["transparency"]
-            else:
-                self.mode = "RGB"
-                self.im = self.im.convert("RGB", Image.FLOYDSTEINBERG)
-        if self.dispose:
-            self.im.paste(self.dispose, self.dispose_extent)
-
         palette = None
 
         info = {}
         frame_transparency = None
         interlace = None
+        frame_dispose_extent = None
         while True:
 
             s = self.fp.read(1)
@@ -247,7 +233,8 @@ class GifImageFile(ImageFile.ImageFile):
                 x1, y1 = x0 + i16(s, 4), y0 + i16(s, 6)
                 if x1 > self.size[0] or y1 > self.size[1]:
                     self._size = max(x1, self.size[0]), max(y1, self.size[1])
-                self.dispose_extent = x0, y0, x1, y1
+                    Image._decompression_bomb_check(self._size)
+                frame_dispose_extent = x0, y0, x1, y1
                 flags = s[8]
 
                 interlace = (flags & 64) != 0
@@ -265,6 +252,26 @@ class GifImageFile(ImageFile.ImageFile):
                 pass
                 # raise OSError, "illegal GIF tag `%x`" % s[0]
 
+        if interlace is None:
+            raise EOFError
+
+        self.__frame = frame
+
+        if self.__frame == 1:
+            self.pyaccess = None
+            if "transparency" in self.info:
+                self.mode = "RGBA"
+                self.im.putpalettealpha(self.info["transparency"], 0)
+                self.im = self.im.convert("RGBA", Image.FLOYDSTEINBERG)
+
+                del self.info["transparency"]
+            else:
+                self.mode = "RGB"
+                self.im = self.im.convert("RGB", Image.FLOYDSTEINBERG)
+
+        if self.dispose:
+            self.im.paste(self.dispose, self.dispose_extent)
+
         frame_palette = palette or self.global_palette
 
         def _rgb(color):
@@ -274,6 +281,7 @@ class GifImageFile(ImageFile.ImageFile):
                 color = (color, color, color)
             return color
 
+        self.dispose_extent = frame_dispose_extent
         try:
             if self.disposal_method < 2:
                 # do not dispose or none specified
